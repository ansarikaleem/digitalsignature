package com.ahliunited.util;

import com.lowagie.text.DocumentException;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.PdfDate;
import com.lowagie.text.pdf.PdfDictionary;
import com.lowagie.text.pdf.PdfName;
import com.lowagie.text.pdf.PdfPKCS7;
import com.lowagie.text.pdf.PdfReader;
import com.lowagie.text.pdf.PdfSignature;
import com.lowagie.text.pdf.PdfSignatureAppearance;
import com.lowagie.text.pdf.PdfStamper;
import com.lowagie.text.pdf.PdfString;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.security.InvalidKeyException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Base64;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

public class SignDocument {
	private static final int ESTIMATED_SIGNATURE_SIZE = 8192;

	private byte[] certificateChain;
	private Certificate[] certificates;
//	private PrivateKey privateKey;

	public SignDocument() throws IOException, KeyStoreException, CertificateException, NoSuchAlgorithmException, UnrecoverableKeyException {
//		try (InputStream inputStream = SignDocument.class.getResourceAsStream("/security/myKeystore.pkcs12")) {
//			KeyStore keyStore = KeyStore.getInstance("PKCS12");
//			keyStore.load(inputStream, "".toCharArray());

//			X509Certificate certificate = (X509Certificate) keyStore.getCertificate("person1");
			
			Certificate[] chain = new Certificate[1];
	        byte [] decoded = Base64.getDecoder().decode("MIIFTTCCBDWgAwIBAgIQdFpVNe3RH+mm+LTR+1WPMTANBgkqhkiG9w0BAQsFADBgMQswCQYDVQQGEwJLVzEzMDEGA1UEChMqVGhlIFB1YmxpYyBBdXRob3JpdHkgZm9yIENpdmlsIEluZm9ybWF0aW9uMRwwGgYDVQQDExNQQUNJIElEIElzc3VhbmNlIENBMB4XDTIyMDQxNDAwMDAwMFoXDTIzMDcyNDIzNTk1OVowgZkxCzAJBgNVBAYTAktXMTMwMQYDVQQKDCpUaGUgUHVibGljIEF1dGhvcml0eSBmb3IgQ2l2aWwgSW5mb3JtYXRpb24xGDAWBgNVBAsMD01vYmlsZSBDaXZpbCBJRDEcMBoGCgmSJomT8ixkAQEMDDI4NTA0MTYwNjIwMzEdMBsGA1UEAwwUR0FVUkFWIEIgTSBCSEFUTkFHQVIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC17bTgJirevJjuy1RiI/gKaK0HYZjAMbMWpZy4zptWzTaPRB8BT3G+jsBBGwnVF7uZD7c1PGcd5JtkEYE9E97EWN0xsD5jtYMtmuQO7LAo44nxZepFd/bJRe2yIkREXRy/8eWb0nzZ91YFfKdDVvRr3yROMcVMfmvAA+0/q/Hb4/wbaqkqcm3okaEYEJ1u/uNozGv8b2NnEKTrmUcWtzx5fLFcvSHrTvkBlELq/x+oVP/D3iiMfkH55K1U75esgevVZnLJLqxx9kJxNz6wKKZ/qdm6tRPZ2RZHhZBioGnOrvKhTe1J/hO/kBv34C31reiVDgXBci+Mpkwrm0C5SKAnAgMBAAGjggHHMIIBwzAJBgNVHRMEAjAAMFMGA1UdHwRMMEowSKBGoESGQmh0dHA6Ly9jcmwucGFjaS5nb3Yua3cvR292ZXJubWVudG9mS3V3YWl0UEFDSUNJVklMSUQvTGF0ZXN0Q1JMLmNybDAOBgNVHQ8BAf8EBAMCBsAwHQYDVR0OBBYEFL4cXwSJD9BSTvdnvxOZFFs1fsjjMB8GA1UdIwQYMBaAFPda3/JM4KzRJL5LhnWU9SIGbeMqMDMGCCsGAQUFBwEBBCcwJTAjBggrBgEFBQcwAYYXaHR0cDovL29jc3AucGFjaS5nb3Yua3cwaAYDVR0RBGEwX6Q+MDwxOjA4BgNVBAMMMSDYrNin2YrYsdin2YEg2KjZh9in2KrZhtis2KfYsSDYqNmH2KfYqtmG2KzYp9ix2KeBHWdhdXJhdmJoYXRuYWdhci50Y3NAZ21haWwuY29tMFMGA1UdEgRMMEqkSDBGMUQwQgYDVQQDDDvYp9mE2YfZitim2Kkg2KfZhNi52KfZhdipINmE2YTZhdi52YTZiNmF2KfYqiDYp9mE2YXYr9mG2YrYqTAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBACTdJgzZJkTJCNs/np1HDEcJjV7PfhROu29BP8dM66DS1G6atAGv7YjrFDx6vaeFsXZKPZn+NqnJK70bkmFLQG2TZGo+F0pOGDTVUHlB/XobOJVuzxj+vjlCdncEpLFIzmqjqbUS4vvtgyXRHT9okM+RA7umBLbCI1uR+0OYevQlZ8Q0IKTYgD3moNcqaYWOEEMPgu+hiLph7wacX2ATKDd+A6K6fAOMuqkl21nD3h43YXQGYk2Gt0C6paxU0C4GgiXcK7K/h/RlPPH/LFmDfv79hCPPqDH2ahzgCW+1XsC9uoEZuXGD26YIRsCIt+M1FOo/GZl8w1WEh8qjwHi6Pjc=");
	        Certificate certificate = CertificateFactory.getInstance("X.509").generateCertificate(new ByteArrayInputStream(decoded));
	        chain[0] = certificate;

//			this.privateKey = (PrivateKey) keyStore.getKey("person1", "".toCharArray());
			this.certificateChain = certificate.getEncoded();
			this.certificates = new Certificate[] { certificate };
//		}
	}

	public static void main(String[] args) throws IOException, DocumentException, NoSuchAlgorithmException, UnrecoverableKeyException,
			KeyStoreException, CertificateException, NoSuchProviderException, InvalidKeyException, SignatureException {
		SignDocument signDocument = new SignDocument();

		ByteArrayOutputStream output = new ByteArrayOutputStream();

		try (InputStream inputStream = SignDocument.class.getResourceAsStream("hello.pdf")) {

			signDocument.sign(IOUtils.toByteArray(inputStream), output);
		}

		File result = new File("./src/main/resources/hello-1.pdf");
		FileUtils.writeByteArrayToFile(result, output.toByteArray());
	}

	public void sign(byte[] document, ByteArrayOutputStream output) throws IOException, DocumentException,
			NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {
		PdfReader pdfReader = new PdfReader(document);

		PdfStamper signer = PdfStamper.createSignature(pdfReader, output, '\0');

		Calendar signDate = Calendar.getInstance();

		int page = 1;

		PdfSignature pdfSignature = new PdfSignature(PdfName.ADOBE_PPKLITE, PdfName.ADBE_PKCS7_DETACHED);
		pdfSignature.setReason("Reason to sign");
		pdfSignature.setLocation("Location of signature");
		pdfSignature.setContact("Person Name");
		pdfSignature.setDate(new PdfDate(signDate));
		pdfSignature.setCert(certificateChain);

		PdfSignatureAppearance appearance = createAppearance(signer, page, pdfSignature);

		PdfPKCS7 sgn = new PdfPKCS7(null, certificates, null, "SHA-256", null, false);
		InputStream data = appearance.getRangeStream();

		MessageDigest digest = MessageDigest.getInstance("SHA-256");
		digest.update(IOUtils.toByteArray(data));
		byte[] appeareanceHash = digest.digest();

//		byte[] hashToSign = sgn.getAuthenticatedAttributeBytes(appeareanceHash, appearance.getSignDate(), null);
//		byte[] signedHash = addDigitalSignatureToHash(hashToSign);
		
		byte[] signedHash = Base64.getDecoder().decode("");

		sgn.setExternalDigest(signedHash, null, "RSA");
		byte[] encodedPKCS7 = sgn.getEncodedPKCS7(appeareanceHash, appearance.getSignDate());

		byte[] paddedSig = new byte[ESTIMATED_SIGNATURE_SIZE];

		System.arraycopy(encodedPKCS7, 0, paddedSig, 0, encodedPKCS7.length);

		PdfDictionary dictionary = new PdfDictionary();
		dictionary.put(PdfName.CONTENTS, new PdfString(paddedSig).setHexWriting(true));
		appearance.close(dictionary);
	}

	private PdfSignatureAppearance createAppearance(PdfStamper signer, int page, PdfSignature pdfSignature)
			throws IOException, DocumentException {
		PdfSignatureAppearance appearance = signer.getSignatureAppearance();
		appearance.setRender(PdfSignatureAppearance.SignatureRenderDescription);
		appearance.setAcro6Layers(true);

		Rectangle rect = new Rectangle(36, 648, 200, 100);
		appearance.setVisibleSignature(rect, page, null);

		appearance.setCryptoDictionary(pdfSignature);
		appearance.setCrypto(null, certificates, null, PdfName.FILTER);

		Map<PdfName, Integer> exclusions = new HashMap<>();
		exclusions.put(PdfName.CONTENTS, ESTIMATED_SIGNATURE_SIZE * 2 + 2);
		appearance.preClose(exclusions);

		return appearance;
	}

//	public byte[] addDigitalSignatureToHash(byte[] hashToSign)
//			throws NoSuchAlgorithmException, SignatureException, InvalidKeyException {
//		Signature signature = Signature.getInstance("SHA256withRSA");
//		signature.initSign(privateKey);
//		signature.update(hashToSign);
//
//		return signature.sign();
//	}

}
